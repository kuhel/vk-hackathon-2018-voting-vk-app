import React from 'react';
import PropTypes from 'prop-types';
import { Panel, Group, List, ListItem, Avatar, PanelHeader, Button, Div, Radio, FormLayout, Slider } from '@vkontakte/vkui';

class Form extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			visibility: {},
			deleteEnabled: false,
		};
	}

	componentDidMount() {
		this.setState({
			visibility: this.props.visibility,
			deleteEnabled: this.props.deleteEnabled,
		})
	}

	markName(value) {
		if (value <= 2 && value >= 0) {
			const mark = [
				'–ù–µ—Ç üí©',
				'–°–∫–æ—Ä–µ–µ –¥–∞, —á–µ–º –Ω–µ—Ç üòâ',
				'–î–∞! üòç'
			];
			return mark[value];
		} else {
			return '–û—à–∏–±–∫–∞';
		}
	}

	nomintaionTitle(value) {
		if (value <= 7 && value >= 0) {
			const nominations = [
				'–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å/–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏–¥–µ–∏ –ø—Ä–æ–µ–∫—Ç–∞:',
				'–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –≤ –∫–µ–π—Å–µ –∑–∞–¥–∞—á–µ:',
				'–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:',
				'–î–∏–∑–∞–π–Ω –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç—å, –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞):',
				'–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è (—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è) —Ä–µ–∞–ª–∏–∑—É–µ–º–æ—Å—Ç—å –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞:',
				'–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞:',
				'–ó–∞–∫–æ–Ω—á–µ–Ω–Ω–æ—Å—Ç—å:',
			];
			return nominations[value];
		} else {
			return '–û—à–∏–±–∫–∞';
		}
	}

	getTeamMark(id) {
		return [...this.props.marks].filter(mark => mark.id === id)[0].marks;
	}

	onClick = (team) => {
		let vis = this.state.visibility;
		vis[team.id] = !vis[team.id];
		this.setState({visibility: vis});
	}

	render() {
		const props = this.props;
		return (
			<Div>
				{props.teams && props.teams.map((team, teamIndex) => 
					<Group key={teamIndex} className={team.isSubmited ? 'disabled--opacity' : ''}>
						<List>
							<ListItem>
								<header onClick={() => this.onClick(team)} className='Team__header'>
									<h3>Team #{team.id} ‚Äî {team.name}</h3>
									<button className={this.state.visibility[team.id] ? 'on' : ''}>
										<svg height="32" viewBox="0 0 48 48" width="32" xmlns="http://www.w3.org/2000/svg"><path d="M24 16l-12 12 2.83 2.83 9.17-9.17 9.17 9.17 2.83-2.83z"/><path d="M0 0h48v48h-48z" fill="none"/></svg>
									</button>
								</header>
								{this.state.visibility[team.id] ? <FormLayout className={team.isSubmited ? 'disabled' : ''}>
									{team.marks.map((mark, i) => {
										return (
											<div key={i}>
												<h4>{this.nomintaionTitle(i)}</h4>
												<Slider
													disabled
													step={1}
													min={0}
													max={2}
													onChange={value => {
														if (value !== this.getTeamMark(team.id)[i]) {
															props.setMark(value, team.id, i)
														}
													}}
													defaultValue={this.getTeamMark(team.id)[i]}
												/>
												<h5 style={{textAlign: 'center'}}>{this.markName(this.getTeamMark(team.id)[i])}</h5>
											</div>
										)
									})}
								</FormLayout> : null}
							</ListItem>
						</List>
						{this.state.visibility[team.id] ? <Div className={`vote-buttons ${team.isSubmited && !this.state.deleteEnabled ? 'disabled' : ''}`}>
							<Button className={this.state.visibility[team.id] ? '' : 'disabled'} size='l' stretched onClick={() => props.submitMarks(team.id)}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</Button>
							{this.state.deleteEnabled && <Button size='l' stretched onClick={() => props.deleteMarks(team.id)} level='outline'>–£–¥–∞–ª–∏—Ç—å</Button>}
							<div style={{paddingBottom: '20px'}}></div>
						</Div> : null}
					</Group>)
				}
			</Div>
		);
	}
}

export default Form;
